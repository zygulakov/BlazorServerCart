@using Data
@inject CartState CartState
<div class="item card-columns" style="width:500px;">

	<img class="card-img" src="@Item.ImageLink" alt="Item Image" />
	<div class="card-body">
		<div class="detail">@Item.Detail</div>
		<div class="unit">@Item.Unit</div>
		<div class="weight">@Item.Weight</div>
		<div class="price">@Item.Quantity x $@Item.Price</div>
	</div>
	<div class="">
		<button class="btn btn-default" @onclick="IncreaseQuantity">+</button>
		<div class="qunatity">@Item.Quantity</div>
		<button class="btn btn-default" @onclick="DecreaseQuantity">-</button>
	</div>
	<div @ref="TotalPriceRef" class="total-price">$@TotalPrice</div>
</div>
@code {
	[Parameter]
	public Item Item { get; set; } = new Item();

	public decimal TotalPrice { get => Item.Quantity * Item.Price; }

	ElementReference TotalPriceRef;

	void IncreaseQuantity()
	{
		CartState.IncreaseItem(Item, 1);
	}

	void DecreaseQuantity()
	{
		CartState.DecreaseItem(Item, 1);
	}

	protected override void OnInitialized()
	{
		base.OnInitialized();
		CartState.OnChange += () => InvokeAsync(StateHasChanged);
	}

	public void Dispose()
	{
		CartState.OnChange -= StateHasChanged;
	}

}
